	sudo apt update - 
	sudo apt install apache2 - install apache2
	
	install required libraries
		sudo apt install php libapache2-mod-php php-cli php-mbstring php-xml php-bcmath php-json php-zip php-curl php-mysql php-xmlrpc php-gd
	

	install php dependancy manager (composer)
		sudo apt install curl unzip
		curl -sS https://getcomposer.org/installer | php
		sudo mv composer.phar /usr/local/bin/composer			// move to bin/composer folder
	
	nevigate to /var/www folder - cd /var/www
	
	Install laravel -
		composer globarequire laravel/installerte
		
	Open nano ~/.bashrc and paste following line at the end of the file
		export PATH="$HOME/.config/composer/vendor/bin:$PATH"
	
	save and exit
	
	then run source ~/.bashrc
	
	verify composer version - composer --version
	verify laravel version - laravel --version
	
	Create new laravel project - laravel new example-project
	
	select appropriate options
		- Which starter kit would you like to install? -> none
		- Which testing framework do you prefer? -> Pest
		- Which database will your application use? -> MySQL
		- Default database updated. Would you like to run the default database migrte -> yes
		- Would you like to run npm install and npm - yes
		
	nevigate to that project - cd example-project

	run the project - php artisan serve

	modify url paste following code inside it
		 sudo nano /etc/apache2/sites-available/example-project.conf
	
		<VirtualHost *:80>
		    ServerAdmin webmaster@localhost
		    DocumentRoot /var/www/example-project/public
		    ServerName example-project.local

		    <Directory /var/www/example-project/public>
			AllowOverride All
			Require all granted
		    </Directory>

		    ErrorLog ${APACHE_LOG_DIR}/error.log
		    CustomLog ${APACHE_LOG_DIR}/access.log combined
		</VirtualHost>

	update etc/host file
		sudo nano /etc/hosts

		127.0.0.1 example-project.local		// url
		127.0.1.1 ubnutu-H270M-D3H

		# The following lines are desirable for IPv6 capable hosts
		::1     ip6-localhost ip6-loopback
		fe00::0 ip6-localnet
		ff00::0 ip6-mcastprefix
		ff02::1 ip6-allnodes
		ff02::2 ip6-allrouters


	Default AUTH via artisan make:auth
		it is depricated and can be used with laravel version 5.6 or before
		
		use laravel ui(bootstrap ui authentication) :- composer require laravel/ui
		and run project with laravel ui : composer run dev
		
		laravel Breeze authentication :-
			composer require laravel/breeze --dev
			php artisan breeze:install
			
		Then select Blade, then Yes, then Pest.
		Migrate:
			php artisan migrate
		Install remaining packages:
			npm install
		and run project with Breeze :-
			composer run dev

	Update the user table schema using migration
		create migration :-php artisan make:migration UpdateUserTableMigration
		
		add new schema
			Schema::table('users', function (Blueprint $table) {
			    //
			    $table->integer('age');
			    $table->float('percentage');
			    $table->string('profileImage')->nullable(true);
			    $table->date('date_of_birth')->nullable();
			    $table->enum('gender', ['male', 'female'])->default('male');
			    $table->enum('userType', ['student', 'teacher'])->default('student');
			});
			
		run php artisan migrate to run the migration
	
	Create user factory for generaating testing user data
		php artisan make:factory userFactory --model=User
		
        Edit the factory defination
            public function definition(): array
            {
                return [
                    'name' => fake()->name(),
                    'email' => fake()->unique()->safeEmail(),
                    'age' => $this->faker->numberBetween(18, 65),
                    'percentage' => $this->faker->randomFloat(2, 0, 100),
                    'date_of_birth' => $this->faker->date(),
                    'gender' => $this->faker->randomElement(['male', 'female']),
                    'userType' => $this->faker->randomElement(['student', 'teacher']),
                    'email_verified_at' => now(),
                    'password' => static::$password ??= Hash::make('password'),
                    'remember_token' => Str::random(10),
                ];
            }  

	Create seeder for filling the testing data
		php artisan make:seeder UserSeeder
		
		run current seeder
			php artisan db:seed --class=UserSeeder
		run all seedners
			php artisan db:seed

	Use data tables in laravel
		use cdn of datatable css :-<link rel="stylesheet" href="//cdn.datatables.net/2.3.4/css/dataTables.dataTables.min.css">
		use cdn of jquery :-    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
   
		use cdn of datatable js :- <script src="//cdn.datatables.net/2.3.4/js/dataTables.min.js"></script>

	set the userTable as datatable	
	    <script>
			$(document).ready(function() {
				$('#userTable').DataTable();
			});
		</script>

	server side processing in datatable  with ajax
		create route
			Route::get('/users1', [UserController::class, 'getUsers1'])->name('getUsers1');
		
		make function
			public function getUsers1(Request $request)
			{
				$users = User::all();
				return DataTables::of($users)
					->addIndexColumn()
					->make(true);
			}
		
		use in datatable
			$(document).ready(function() {
            $('#userTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: "{{ route('getUsers1') }}",
                columns: [{
                        data: 'id'
                    },
                    {
                        data: 'name'
                    },
                    {
                        data: 'email'
                    },
                    {
                        data: 'date_of_birth'
                    },
                    {
                        data: 'age'
                    },
                    {
                        data: 'percentage'
                    },
                    {
                        data: 'gender'
                    },
                    {
                        data: 'userType'
                    },
                ]
            });
        });


	Observers in laravel:-
		An Observer in Laravel is a way to listen for various events that occur on Eloquent models. It helps you run custom actions when certain events happen (e.g., saving a model, updating a model, deleting a model, etc.).

		In simple terms, Observers help separate the logic of what happens when a model changes (like creating or updating data) from the model itself.

	Advantages of observers :-

		- Clean Code: Keeps your controllers and models clean by moving event handling to a dedicated observer class. 
		- Reusability: Allows you to apply the same logic across different models in a consistent way.
		- Separation of Concerns: Keeps the model logic focused on data and business rules, while the observer handles actions like logging, sending notifications, etc.

	Steps to Create an Observer in Laravel
		1. Create the Observer Class: php artisan make:observer UserObserver --model=User
		2. Define Event Methods: In the UserObserver class, you define methods that correspond to the events you want to listen to, such as created, updated, deleted, etc.
		3. Register the Observer: 
			we need to register the observer to make Laravel aware of it. This is done in the boot() method of App\Providers\AppServiceProvider.
				User::observe(UserObserver::class);
		4. Done.

	Common Eloquent Events

		- creating: Before a new model is saved to the database.

		- created: After a model is saved to the database.

		- updating: Before an existing model is updated.

		- updated: After a model is updated.

		- deleting: Before a model is deleted.

		- deleted: After a model is deleted.